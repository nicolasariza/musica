{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Informacion.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","setBusquedaLetra","useState","artista","cancion","busqueda","setBusqueda","error","setError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Cancion","letra","Informacion","informacion","Object","keys","length","strArtistThumb","strGenre","strBiographyES","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","busquedaLetra","setLetra","setInformacion","useEffect","a","url","url2","Promise","all","axios","get","data","lyrics","artists","consultarApiLetra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d3db6ff6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Formulario = ({ setBusquedaLetra }) => {\r\n  const [busqueda, setBusqueda] = useState({\r\n    artista: \"\",\r\n    cancion: \"\",\r\n  });\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const { artista, cancion } = busqueda;\r\n\r\n  const actualizarState = (e) => {\r\n    setBusqueda({\r\n      ...busqueda,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const buscarInformacion = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (artista.trim === \"\" || cancion.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n\r\n    setBusquedaLetra(busqueda);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-info\">\r\n      {error ? (\r\n        <p className=\"alert alert-danger text-center p-2\">\r\n          Todos los campos son obligatorios\r\n        </p>\r\n      ) : null}\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <form\r\n            onSubmit={buscarInformacion}\r\n            className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n          >\r\n            <fieldset>\r\n              <legend className=\"text-center\">\r\n                Buscador letras de canciones\r\n              </legend>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label>Artista</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"artista\"\r\n                      placeholder=\"Nombre del artista\"\r\n                      onChange={actualizarState}\r\n                      value={artista}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label>Cancion</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"cancion\"\r\n                      placeholder=\"Nombre de la cancion\"\r\n                      onChange={actualizarState}\r\n                      value={cancion}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button className=\"btn btn-primary float-right\" type=\"submit\">\r\n                Buscar\r\n              </button>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport { Fragment } from \"react\";\r\n\r\nconst Cancion = ({ letra }) => {\r\n  if (!letra) return null;\r\n  return (\r\n    <Fragment>\r\n      <h2>Letra Canción</h2>\r\n      <p className=\"letra\">{letra}</p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Cancion;\r\n","import React from \"react\";\r\n\r\nconst Informacion = ({ informacion }) => {\r\n  if (Object.keys(informacion).length === 0) return null;\r\n\r\n  const { strArtistThumb, strGenre, strBiographyES } = informacion;\r\n  return (\r\n    <div className=\"card border-light\">\r\n      <div className=\"card-header bd-primary text-light font-weight-bold\">\r\n        Informacion del artista\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <img src={strArtistThumb} alt=\"Logo Artista\" />\r\n        <p className=\"card-text\">Género: {strGenre}</p>\r\n        <h2 className=\"card-text\">Biografía</h2>\r\n        <p className=\"card-text\">{strBiographyES}</p>\r\n        <p className=\"card-text\">\r\n          <a\r\n            href={`https://${informacion.strFacebook}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fab fa-facebook\"></i>\r\n          </a>\r\n          <a\r\n            href={`https://${informacion.strTwitter}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fab fa-twitter\"></i>\r\n          </a>\r\n          <a\r\n            href={`${informacion.strLastFMChart}`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <i className=\"fab fa-lastfm\"></i>\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Informacion;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport axios from \"axios\";\nimport Cancion from \"./components/Cancion\";\nimport Informacion from \"./components/Informacion\";\n\nfunction App() {\n  const [busquedaLetra, setBusquedaLetra] = useState({});\n\n  const [letra, setLetra] = useState(\"\");\n\n  const [informacion, setInformacion] = useState({});\n\n  const { artista, cancion } = busquedaLetra;\n  useEffect(() => {\n    if (Object.keys(busquedaLetra).length === 0) return;\n\n    const consultarApiLetra = async () => {\n      const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`;\n      const url2 = `https://www.theaudiodb.com/api/v1/json/1/search.php?s=${artista}`;\n\n      // El promise ayuda a que la consulta a ambas apis sea al tiempo\n      const [letra, informacion] = await Promise.all([\n        axios.get(url),\n        axios.get(url2),\n      ]);\n      setLetra(letra.data.lyrics);\n      setInformacion(informacion.data.artists[0]);\n    };\n\n    consultarApiLetra();\n  }, [busquedaLetra, informacion]);\n  return (\n    <Fragment>\n      <Formulario setBusquedaLetra={setBusquedaLetra} />\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Informacion informacion={informacion} />\n          </div>\n          <div className=\"col-md-6\">\n            <Cancion letra={letra} />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}